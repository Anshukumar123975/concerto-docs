{
  "pluginId": "default",
  "version": "current",
  "label": "Next",
  "banner": null,
  "badge": false,
  "noIndex": false,
  "className": "docs-version-current",
  "isLast": true,
  "docsSidebars": {
    "tutorialSidebar": [
      {
        "type": "link",
        "label": "Introduction",
        "href": "/docs/intro",
        "docId": "intro"
      },
      {
        "type": "link",
        "label": "Why Concerto?",
        "href": "/docs/why-concerto",
        "docId": "why-concerto"
      },
      {
        "type": "link",
        "label": "Quick Start",
        "href": "/docs/quick-start",
        "docId": "quick-start"
      },
      {
        "type": "category",
        "label": "Specification",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Namespaces",
            "href": "/docs/specification/model-namespaces",
            "docId": "specification/model-namespaces"
          },
          {
            "type": "link",
            "label": "Imports",
            "href": "/docs/specification/model-imports",
            "docId": "specification/model-imports"
          },
          {
            "type": "link",
            "label": "Enumerations",
            "href": "/docs/specification/model-enums",
            "docId": "specification/model-enums"
          },
          {
            "type": "link",
            "label": "Classes",
            "href": "/docs/specification/model-classes",
            "docId": "specification/model-classes"
          },
          {
            "type": "link",
            "label": "Properties",
            "href": "/docs/specification/model-properties",
            "docId": "specification/model-properties"
          },
          {
            "type": "link",
            "label": "Relationships",
            "href": "/docs/specification/model-relationships",
            "docId": "specification/model-relationships"
          },
          {
            "type": "link",
            "label": "Decorators",
            "href": "/docs/specification/model-decorators",
            "docId": "specification/model-decorators"
          },
          {
            "type": "link",
            "label": "Vocabulary",
            "href": "/docs/specification/model-vocabulary",
            "docId": "specification/model-vocabulary"
          },
          {
            "type": "link",
            "label": "Metamodel JSON",
            "href": "/docs/specification/model-metamodel",
            "docId": "specification/model-metamodel"
          }
        ],
        "href": "/docs/category/specification"
      },
      {
        "type": "category",
        "label": "Code Generation",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Apache Avro",
            "href": "/docs/codegen/codegen-avro",
            "docId": "codegen/codegen-avro"
          },
          {
            "type": "link",
            "label": "C#",
            "href": "/docs/codegen/codegen-csharp",
            "docId": "codegen/codegen-csharp"
          },
          {
            "type": "link",
            "label": "Go",
            "href": "/docs/codegen/codegen-golang",
            "docId": "codegen/codegen-golang"
          },
          {
            "type": "link",
            "label": "GraphQL",
            "href": "/docs/codegen/codegen-graphql",
            "docId": "codegen/codegen-graphql"
          },
          {
            "type": "link",
            "label": "Java",
            "href": "/docs/codegen/codegen-java",
            "docId": "codegen/codegen-java"
          },
          {
            "type": "link",
            "label": "JSON Schema",
            "href": "/docs/codegen/codegen-jsonschema",
            "docId": "codegen/codegen-jsonschema"
          },
          {
            "type": "link",
            "label": "Markdown",
            "href": "/docs/codegen/codegen-markdown",
            "docId": "codegen/codegen-markdown"
          },
          {
            "type": "link",
            "label": "Mermaid",
            "href": "/docs/codegen/codegen-mermaid",
            "docId": "codegen/codegen-mermaid"
          },
          {
            "type": "link",
            "label": "OData",
            "href": "/docs/codegen/codegen-odata",
            "docId": "codegen/codegen-odata"
          },
          {
            "type": "link",
            "label": "Open API",
            "href": "/docs/codegen/codegen-openapi",
            "docId": "codegen/codegen-openapi"
          },
          {
            "type": "link",
            "label": "Plant UML",
            "href": "/docs/codegen/codegen-plantuml",
            "docId": "codegen/codegen-plantuml"
          },
          {
            "type": "link",
            "label": "Protobuf",
            "href": "/docs/codegen/codegen-protobuf",
            "docId": "codegen/codegen-protobuf"
          },
          {
            "type": "link",
            "label": "Typescript",
            "href": "/docs/codegen/codegen-typescript",
            "docId": "codegen/codegen-typescript"
          },
          {
            "type": "link",
            "label": "XML Schema",
            "href": "/docs/codegen/codegen-xmlschema",
            "docId": "codegen/codegen-xmlschema"
          }
        ],
        "href": "/docs/category/code-generation"
      },
      {
        "type": "category",
        "label": "Model Inference",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "JSON Schema",
            "href": "/docs/import/infer-jsonschema",
            "docId": "import/infer-jsonschema"
          },
          {
            "type": "link",
            "label": "Open API",
            "href": "/docs/import/infer-openapi",
            "docId": "import/infer-openapi"
          }
        ],
        "href": "/docs/category/model-inference"
      },
      {
        "type": "category",
        "label": "Migration",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "Concerto 0.82 to 1.0",
            "href": "/docs/migration/ref-migrate-concerto-0.82-1.0",
            "docId": "migration/ref-migrate-concerto-0.82-1.0"
          },
          {
            "type": "link",
            "label": "Concerto 1.0 to 2.0",
            "href": "/docs/migration/ref-migrate-concerto-1.0-2.0",
            "docId": "migration/ref-migrate-concerto-1.0-2.0"
          },
          {
            "type": "link",
            "label": "Concerto 2.0 to 3.0",
            "href": "/docs/migration/ref-migrate-concerto-2.0-3.0",
            "docId": "migration/ref-migrate-concerto-2.0-3.0"
          }
        ],
        "href": "/docs/category/migration"
      },
      {
        "type": "category",
        "label": "Using the API",
        "collapsible": true,
        "collapsed": true,
        "items": [
          {
            "type": "link",
            "label": "JavaScript API Reference",
            "href": "/docs/api/ref-concerto-js-api",
            "docId": "api/ref-concerto-js-api"
          },
          {
            "type": "link",
            "label": "Using the JavaScript API",
            "href": "/docs/api/model-api",
            "docId": "api/model-api"
          }
        ],
        "href": "/docs/category/using-the-api"
      },
      {
        "type": "link",
        "label": "Command Line",
        "href": "/docs/ref-concerto-cli",
        "docId": "ref-concerto-cli"
      }
    ]
  },
  "docs": {
    "api/model-api": {
      "id": "api/model-api",
      "title": "Using the JavaScript API",
      "description": "Install the Core Library",
      "sidebar": "tutorialSidebar"
    },
    "api/ref-concerto-js-api": {
      "id": "api/ref-concerto-js-api",
      "title": "JavaScript API Reference",
      "description": "",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-avro": {
      "id": "codegen/codegen-avro",
      "title": "Apache Avro",
      "description": "Apache Avro is an Open Source schema and IDL language from Apache. It is often used with Apache Kafka or other big data tools.",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-csharp": {
      "id": "codegen/codegen-csharp",
      "title": "C#",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-golang": {
      "id": "codegen/codegen-golang",
      "title": "Go",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-graphql": {
      "id": "codegen/codegen-graphql",
      "title": "GraphQL",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-java": {
      "id": "codegen/codegen-java",
      "title": "Java",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-jsonschema": {
      "id": "codegen/codegen-jsonschema",
      "title": "JSON Schema",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-markdown": {
      "id": "codegen/codegen-markdown",
      "title": "Markdown",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-mermaid": {
      "id": "codegen/codegen-mermaid",
      "title": "Mermaid",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-odata": {
      "id": "codegen/codegen-odata",
      "title": "OData",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-openapi": {
      "id": "codegen/codegen-openapi",
      "title": "Open API",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-plantuml": {
      "id": "codegen/codegen-plantuml",
      "title": "Plant UML",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-protobuf": {
      "id": "codegen/codegen-protobuf",
      "title": "Protobuf",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-typescript": {
      "id": "codegen/codegen-typescript",
      "title": "Typescript",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "codegen/codegen-xmlschema": {
      "id": "codegen/codegen-xmlschema",
      "title": "XML Schema",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "import/infer-jsonschema": {
      "id": "import/infer-jsonschema",
      "title": "JSON Schema",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "import/infer-openapi": {
      "id": "import/infer-openapi",
      "title": "Open API",
      "description": "Options",
      "sidebar": "tutorialSidebar"
    },
    "intro": {
      "id": "intro",
      "title": "Introduction",
      "description": "Concerto is a lightweight schema language and runtime for business concepts.",
      "sidebar": "tutorialSidebar"
    },
    "migration/ref-migrate-concerto-0.82-1.0": {
      "id": "migration/ref-migrate-concerto-0.82-1.0",
      "title": "Concerto 0.82 to 1.0",
      "description": "Concerto 1.0 delivers fundamental improvements over previous releases, whilst maintaining a high-degree (though not total!) of backwards compatibility with 0.82. In particular all of the 0.82 Concerto syntax remains valid in 1.0.",
      "sidebar": "tutorialSidebar"
    },
    "migration/ref-migrate-concerto-1.0-2.0": {
      "id": "migration/ref-migrate-concerto-1.0-2.0",
      "title": "Concerto 1.0 to 2.0",
      "description": "Concerto 2.0 delivers fundamental improvements over previous releases, whilst maintaining a high-degree (though not total!) of backwards compatibility with 1.x. In particular all of the 1.x Concerto syntax remains valid in 2.0.",
      "sidebar": "tutorialSidebar"
    },
    "migration/ref-migrate-concerto-2.0-3.0": {
      "id": "migration/ref-migrate-concerto-2.0-3.0",
      "title": "Concerto 2.0 to 3.0",
      "description": "Concerto 3.0 delivers fundamental improvements over previous releases, whilst maintaining a high-degree (though not total!) of backwards compatibility with 2.x. In particular all of the 2.x Concerto syntax remains valid in 3.0.",
      "sidebar": "tutorialSidebar"
    },
    "quick-start": {
      "id": "quick-start",
      "title": "Quick Start",
      "description": "What you'll need",
      "sidebar": "tutorialSidebar"
    },
    "ref-concerto-cli": {
      "id": "ref-concerto-cli",
      "title": "Command Line",
      "description": "Install the @accordproject/concerto-cli npm package to access the Concerto command line interface (CLI). After installation you can use the concerto command and its sub-commands as described below.",
      "sidebar": "tutorialSidebar"
    },
    "specification/model-classes": {
      "id": "specification/model-classes",
      "title": "Classes",
      "description": "Concepts are similar to class declarations in most object-oriented languages, in that they may have a super-type and a set of typed properties:",
      "sidebar": "tutorialSidebar"
    },
    "specification/model-decorators": {
      "id": "specification/model-decorators",
      "title": "Decorators",
      "description": "Model elements may have arbitrary decorators (aka annotations) placed on them. These are available via API and can be useful for tools to extend the model. Accord Project decorators are defined in the Decorators Reference.",
      "sidebar": "tutorialSidebar"
    },
    "specification/model-enums": {
      "id": "specification/model-enums",
      "title": "Enumerations",
      "description": "Enumerations are used to capture lists of domain values.",
      "sidebar": "tutorialSidebar"
    },
    "specification/model-imports": {
      "id": "specification/model-imports",
      "title": "Imports",
      "description": "In order for one namespace to reference types defined in another namespace, the types must be imported for a version of a namespace.",
      "sidebar": "tutorialSidebar"
    },
    "specification/model-metamodel": {
      "id": "specification/model-metamodel",
      "title": "Metamodel JSON",
      "description": "Concerto models are JSON documents.",
      "sidebar": "tutorialSidebar"
    },
    "specification/model-namespaces": {
      "id": "specification/model-namespaces",
      "title": "Namespaces",
      "description": "Each Concerto file starts with the name and version of a single namespace. A Concerto namespace declares a set of declarations. A declaration is one of: enumeration, concept, asset, participant, transaction, event. All declarations within a single file belong to the same namespace.",
      "sidebar": "tutorialSidebar"
    },
    "specification/model-properties": {
      "id": "specification/model-properties",
      "title": "Properties",
      "description": "Class declarations contain properties. Each property has a type which can either be a type defined in the same namespace, an imported type, or a primitive type.",
      "sidebar": "tutorialSidebar"
    },
    "specification/model-relationships": {
      "id": "specification/model-relationships",
      "title": "Relationships",
      "description": "A relationship in Concerto Modeling Language (CML) is a tuple composed of:",
      "sidebar": "tutorialSidebar"
    },
    "specification/model-vocabulary": {
      "id": "specification/model-vocabulary",
      "title": "Vocabulary",
      "description": "The Vocabulary module for Concerto optionally allows human-readable labels (Terms) to be associated with model elements. Terms are stored within a locale specific vocabulary YAML file associated with a Concerto namespace.",
      "sidebar": "tutorialSidebar"
    },
    "why-concerto": {
      "id": "why-concerto",
      "title": "Why Concerto?",
      "description": "Model Driven Development",
      "sidebar": "tutorialSidebar"
    }
  }
}